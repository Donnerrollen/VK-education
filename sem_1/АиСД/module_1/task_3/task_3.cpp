//  Во всех задачах из следующего списка следует написать структуру данных, обрабатывающую команды
//  push* и pop* .
//  Формат входных данных.
//  В первой строке количество команд n.n ≤ 1000000.
//  Каждая команда задаётся как 2 целых числа : a b.
//  a = 1 - push front
//  a = 2 - pop front
//  a = 3 - push back
//  a = 4 - pop back
//  Команды добавления элемента 1 и 3 заданы с неотрицательным параметром b.
//  Для очереди используются команды 2 и 3. Для дека используются все четыре команды.
//  Если дана команда pop*, то число b - ожидаемое значение.Если команда pop вызвана для пустой
//  структуры данных, то ожидается “ - 1”.
//  Формат выходных данных.
//  Требуется напечатать YES - если все ожидаемые значения совпали.Иначе, если хотя бы одно
//  ожидание не оправдалось, то напечатать NO.
//
//  3_2.Реализовать дек с динамическим зацикленным буфером(на основе динамического массива).
//  Требования: Дек должен быть реализован в виде класса.
//
//  in:
//  3
//  1 44
//  3 50
//  2 44
//  output:
//  YES
//
//  in:
//  2
//  2 - 1
//  1 10
//  output:
//  YES
//
//  in:
//  2
//  3 44
//  4 66
//  output:
//  NO

#include <iostream>

//класс Дека
template <typename T>
class Deq {
public:
    Deq();
    void PushFront(T el);
    T PopFront();
    void PushBack(T el);
    T PopBack();

private:
    int start;
    int end;
    T * arr;
};

template <typename T>
Deq<T>::Deq() {

}

int main()
{
    std::cout << "Hello World!\n";
}
